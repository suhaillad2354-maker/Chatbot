{"ast":null,"code":"var _jsxFileName = \"/home/smiley/dhatchan/src/context/Context.jsx\",\n  _s = $RefreshSig$();\nimport { createContext, useState } from \"react\";\nimport run from \"../config/dhatchan\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const Context = /*#__PURE__*/createContext();\nconst ContextProvider = props => {\n  _s();\n  const [input, settInput] = useState(\"\");\n  const [recent, setRecent] = useState(\"\");\n  const [prevPrompt, setPrevPrompt] = useState([]);\n  const [showResult, setShowResult] = useState(false);\n  const [loading, setLoading] = useState(false);\n  const [resultData, setResultData] = useState(\"\");\n  const delayPara = (index, nextWord) => {\n    setTimeout(function () {\n      setResultData(prev => prev + nextWord);\n    }, 75 * index);\n  };\n  const onSent = async prompt => {\n    const finalPrompt = prompt || input;\n    setResultData(\"\");\n    setLoading(true);\n    setShowResult(true);\n    setRecent(finalPrompt);\n\n    // Call API\n    const response = await run(finalPrompt);\n    let responseArray = response.split(\"**\");\n    let newResponse = \"\";\n    for (let i = 0; i < responseArray.length; i++) {\n      if (i === 0 || i % 2 !== 1) {\n        newResponse += responseArray[i];\n      } else {\n        newResponse += \"<b>\" + responseArray[i] + \"</b>\";\n      }\n    }\n    let newResponse2 = newResponse.split(\"*\").join(\"<br/>\");\n    let newResponseArray = newResponse2.split(\" \");\n    for (let i = 0; i < newResponseArray.length; i++) {\n      const nextWord = newResponseArray[i];\n      delayPara(i, nextWord + \" \");\n    }\n\n    // ✅ Save both prompt and result in history\n    setPrevPrompt(prev => [...prev, {\n      prompt: finalPrompt,\n      result: newResponse2\n    }]);\n    setResultData(newResponse2);\n    setLoading(false);\n    settInput(\"\");\n  };\n  const loadPrompt = item => {\n    setShowResult(true);\n    setRecent(item.prompt);\n    setResultData(item.result); // ✅ use saved result, no API call\n    setLoading(false);\n  };\n  const contextValue = {\n    prevPrompt,\n    setPrevPrompt,\n    onSent,\n    loadPrompt,\n    // ✅ add here\n    setRecent,\n    recent,\n    showResult,\n    loading,\n    resultData,\n    input,\n    settInput\n  };\n  return /*#__PURE__*/_jsxDEV(Context.Provider, {\n    value: contextValue,\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 80,\n    columnNumber: 9\n  }, this);\n};\n_s(ContextProvider, \"1Ddx7YyKVbbf2LDHUhNS5DCEHAE=\");\n_c = ContextProvider;\nexport default ContextProvider;\nvar _c;\n$RefreshReg$(_c, \"ContextProvider\");","map":{"version":3,"names":["createContext","useState","run","jsxDEV","_jsxDEV","Context","ContextProvider","props","_s","input","settInput","recent","setRecent","prevPrompt","setPrevPrompt","showResult","setShowResult","loading","setLoading","resultData","setResultData","delayPara","index","nextWord","setTimeout","prev","onSent","prompt","finalPrompt","response","responseArray","split","newResponse","i","length","newResponse2","join","newResponseArray","result","loadPrompt","item","contextValue","Provider","value","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/smiley/dhatchan/src/context/Context.jsx"],"sourcesContent":["import { createContext, useState } from \"react\";\nimport run from \"../config/dhatchan\";\n\nexport const Context = createContext();\n\nconst ContextProvider = (props) => {\n    const [input, settInput] = useState(\"\");\n    const [recent, setRecent] = useState(\"\");\n    const [prevPrompt, setPrevPrompt] = useState([]);\n    const [showResult, setShowResult] = useState(false);\n    const [loading, setLoading] = useState(false);\n    const [resultData, setResultData] = useState(\"\");\n\n    const delayPara = (index, nextWord) => {\n        setTimeout(function () {\n            setResultData((prev) => prev + nextWord);\n        }, 75 * index);\n    };\n\n    const onSent = async (prompt) => {\n        const finalPrompt = prompt || input;\n\n        setResultData(\"\");\n        setLoading(true);\n        setShowResult(true);\n        setRecent(finalPrompt);\n\n        // Call API\n        const response = await run(finalPrompt);\n\n        let responseArray = response.split(\"**\");\n        let newResponse = \"\";\n        for (let i = 0; i < responseArray.length; i++) {\n            if (i === 0 || i % 2 !== 1) {\n                newResponse += responseArray[i];\n            } else {\n                newResponse += \"<b>\" + responseArray[i] + \"</b>\";\n            }\n        }\n\n        let newResponse2 = newResponse.split(\"*\").join(\"<br/>\");\n        let newResponseArray = newResponse2.split(\" \");\n\n        for (let i = 0; i < newResponseArray.length; i++) {\n            const nextWord = newResponseArray[i];\n            delayPara(i, nextWord + \" \");\n        }\n\n        // ✅ Save both prompt and result in history\n        setPrevPrompt((prev) => [...prev, { prompt: finalPrompt, result: newResponse2 }]);\n\n        setResultData(newResponse2);\n        setLoading(false);\n        settInput(\"\");\n    };\n    const loadPrompt = (item) => {\n        setShowResult(true);\n        setRecent(item.prompt);\n        setResultData(item.result);  // ✅ use saved result, no API call\n        setLoading(false);\n    };\n    \n    const contextValue = {\n        prevPrompt,\n        setPrevPrompt,\n        onSent,\n        loadPrompt,        // ✅ add here\n        setRecent,\n        recent,\n        showResult,\n        loading,\n        resultData,\n        input,\n        settInput,\n    };\n    \n  \n\n    return (\n        <Context.Provider value={contextValue}>\n            {props.children}\n        </Context.Provider>\n    );\n};\n\nexport default ContextProvider;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}