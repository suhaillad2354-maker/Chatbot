{"ast":null,"code":"var _jsxFileName = \"/home/smiley/dhatchan/src/context/Context.jsx\",\n  _s = $RefreshSig$();\nimport { createContext, useState } from \"react\";\nimport run from \"../config/dhatchan\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const Context = /*#__PURE__*/createContext();\nconst ContextProvider = props => {\n  _s();\n  const [input, settInput] = useState(\"\");\n  const [recent, setRecent] = useState(\"\");\n  const [prevPrompt, setPrevPrompt] = useState([]);\n  const [showResult, setShowResult] = useState(false);\n  const [loading, setLoading] = useState(false);\n  const [resultData, setResultData] = useState(\"\");\n  const delayPara = (index, nextWord) => {};\n  const onSent = async prompt => {\n    setResultData(\"\");\n    setLoading(true);\n    setShowResult(true);\n    setRecent(input);\n    const response = await run(input);\n    // let responseArray = response.split(\"**\");\n    let newResponse;\n    for (let i = 0; i < responseArray.length; i++) {\n      if (i === 0 || i % 2 !== 1) {\n        newResponse += responseArray[i];\n      } else {\n        newResponse += /*#__PURE__*/_jsxDEV(\"b\", {\n          children: \" +responseArray[i]+\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 32,\n          columnNumber: 32\n        }, this);\n      }\n    }\n    setResultData(newResponse);\n    setLoading(false);\n    settInput(\"\");\n  };\n  const contextValue = {\n    prevPrompt,\n    setPrevPrompt,\n    onSent,\n    setRecent,\n    recent,\n    showResult,\n    loading,\n    resultData,\n    input,\n    settInput\n  };\n  return /*#__PURE__*/_jsxDEV(Context.Provider, {\n    value: contextValue,\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 54,\n    columnNumber: 9\n  }, this);\n};\n_s(ContextProvider, \"DrcviiUMp3IGLWRcFXrq+TD/6+s=\");\n_c = ContextProvider;\nexport default ContextProvider;\nvar _c;\n$RefreshReg$(_c, \"ContextProvider\");","map":{"version":3,"names":["createContext","useState","run","jsxDEV","_jsxDEV","Context","ContextProvider","props","_s","input","settInput","recent","setRecent","prevPrompt","setPrevPrompt","showResult","setShowResult","loading","setLoading","resultData","setResultData","delayPara","index","nextWord","onSent","prompt","response","newResponse","i","responseArray","length","children","fileName","_jsxFileName","lineNumber","columnNumber","contextValue","Provider","value","_c","$RefreshReg$"],"sources":["/home/smiley/dhatchan/src/context/Context.jsx"],"sourcesContent":["import { createContext, useState } from \"react\";\nimport run from \"../config/dhatchan\";\n\nexport const Context = createContext();\n\nconst ContextProvider = (props) => {\n    const[input,settInput]=useState(\"\");\n    const[recent,setRecent]=useState(\"\");\n    const[prevPrompt,setPrevPrompt]=useState([]);\n    const[showResult,setShowResult]=useState(false);\n    const[loading,setLoading]=useState(false);\n    const[resultData,setResultData]=useState(\"\");\n\n    const delayPara = (index,nextWord) => {\n\n    }\n    const onSent = async(prompt) => {\n\n        setResultData(\"\")\n        setLoading(true)\n        setShowResult(true)\n        setRecent(input)\n        const response = await run(input)\n        // let responseArray = response.split(\"**\");\n        let newResponse\n        for (let i=0;i<responseArray.length;i++)\n        {\n            if(i===0 || i%2 !== 1){\n                newResponse += responseArray[i];\n            }\n            else{\n                newResponse += <b> +responseArray[i]+</b>\n            }\n        }\n        setResultData(newResponse)\n        setLoading(false)\n        settInput(\"\")\n    }\n\n\n    const contextValue = {\n        prevPrompt,\n        setPrevPrompt,\n        onSent,\n        setRecent,\n        recent,\n        showResult,\n        loading,\n        resultData,\n        input,\n        settInput,\n    }\n    return(\n        <Context.Provider value={contextValue}>\n            {props.children}\n        </Context.Provider>\n    )\n}\n\nexport default ContextProvider"],"mappings":";;AAAA,SAASA,aAAa,EAAEC,QAAQ,QAAQ,OAAO;AAC/C,OAAOC,GAAG,MAAM,oBAAoB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAErC,OAAO,MAAMC,OAAO,gBAAGL,aAAa,CAAC,CAAC;AAEtC,MAAMM,eAAe,GAAIC,KAAK,IAAK;EAAAC,EAAA;EAC/B,MAAK,CAACC,KAAK,EAACC,SAAS,CAAC,GAACT,QAAQ,CAAC,EAAE,CAAC;EACnC,MAAK,CAACU,MAAM,EAACC,SAAS,CAAC,GAACX,QAAQ,CAAC,EAAE,CAAC;EACpC,MAAK,CAACY,UAAU,EAACC,aAAa,CAAC,GAACb,QAAQ,CAAC,EAAE,CAAC;EAC5C,MAAK,CAACc,UAAU,EAACC,aAAa,CAAC,GAACf,QAAQ,CAAC,KAAK,CAAC;EAC/C,MAAK,CAACgB,OAAO,EAACC,UAAU,CAAC,GAACjB,QAAQ,CAAC,KAAK,CAAC;EACzC,MAAK,CAACkB,UAAU,EAACC,aAAa,CAAC,GAACnB,QAAQ,CAAC,EAAE,CAAC;EAE5C,MAAMoB,SAAS,GAAGA,CAACC,KAAK,EAACC,QAAQ,KAAK,CAEtC,CAAC;EACD,MAAMC,MAAM,GAAG,MAAMC,MAAM,IAAK;IAE5BL,aAAa,CAAC,EAAE,CAAC;IACjBF,UAAU,CAAC,IAAI,CAAC;IAChBF,aAAa,CAAC,IAAI,CAAC;IACnBJ,SAAS,CAACH,KAAK,CAAC;IAChB,MAAMiB,QAAQ,GAAG,MAAMxB,GAAG,CAACO,KAAK,CAAC;IACjC;IACA,IAAIkB,WAAW;IACf,KAAK,IAAIC,CAAC,GAAC,CAAC,EAACA,CAAC,GAACC,aAAa,CAACC,MAAM,EAACF,CAAC,EAAE,EACvC;MACI,IAAGA,CAAC,KAAG,CAAC,IAAIA,CAAC,GAAC,CAAC,KAAK,CAAC,EAAC;QAClBD,WAAW,IAAIE,aAAa,CAACD,CAAC,CAAC;MACnC,CAAC,MACG;QACAD,WAAW,iBAAIvB,OAAA;UAAA2B,QAAA,EAAG;QAAmB;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAG,CAAC;MAC7C;IACJ;IACAf,aAAa,CAACO,WAAW,CAAC;IAC1BT,UAAU,CAAC,KAAK,CAAC;IACjBR,SAAS,CAAC,EAAE,CAAC;EACjB,CAAC;EAGD,MAAM0B,YAAY,GAAG;IACjBvB,UAAU;IACVC,aAAa;IACbU,MAAM;IACNZ,SAAS;IACTD,MAAM;IACNI,UAAU;IACVE,OAAO;IACPE,UAAU;IACVV,KAAK;IACLC;EACJ,CAAC;EACD,oBACIN,OAAA,CAACC,OAAO,CAACgC,QAAQ;IAACC,KAAK,EAAEF,YAAa;IAAAL,QAAA,EACjCxB,KAAK,CAACwB;EAAQ;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACD,CAAC;AAE3B,CAAC;AAAA3B,EAAA,CApDKF,eAAe;AAAAiC,EAAA,GAAfjC,eAAe;AAsDrB,eAAeA,eAAe;AAAA,IAAAiC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}